#!/usr/bin/python -u
# minimal elim example script

import os
import time
import json
from socket import gethostname

"""
Copyright (c) 2015 INFN - INDIGO-DataCloud
All Rights Reserved
Licensed under the Apache License, Version 2.0;
you may not use this file except in compliance with the
License. You may obtain a copy of the License at:
   http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied.
See the License for the specific language governing
permissions and limitations under the License.
"""

lsfconf = os.environ['LSF_ENVDIR']
dynconf = 'scripts/dynpart'

dynp_conf_file = os.path.join(lsfconf, dynconf, 'dynp.conf')

dpconf = json.load(open(dynp_conf_file, 'r'))

status_file = dpconf['switch']['batch_cloud_json']

# We need to check for fqdn
myhn = gethostname()

# Xfn = os.path.join(myhome,'farm.json')
X = json.load(open(status_file, 'r'))

# param will be read from configuration
# during devel we populate it here

param = {}

# for production
param['sleeptime'] = 60
# for testing
# param['sleeptime'] = 2
param['default_flag_batch'] = 1
param['default_flag_cloud'] = 2
param['default_flag'] = 1


def empty_X():
    d = {}
    K = [u'C', u'B', u'B2CR', u'C2BR', u'C2B', u'FB', u'FC', u'B2C']
    x = [d.setdefault(k, []) for k in K]
    return d


def upd_X(Xfn):
    """TODO: log something in case of exception"""
    try:
        X = json.load(open(Xfn, 'r'))
    except IOError:
        return empty_X()
    except:
        return empty_X()
    return X


def Flag(X, hn):
    flag_batch = param['default_flag_batch']
    flag_cloud = param['default_flag_cloud']
    flag_default = param['default_flag']
    if hn in set(X['FB']):
        return flag_batch
    if hn in set(X['FC']):
        return flag_cloud
    if hn in set(X['B']):
        return flag_batch
    if hn in set(X['C']):
        return flag_cloud
    if hn in set(X['B2C']):
        return flag_cloud
    if hn in set(X['C2B']):
        return flag_cloud
    if hn in set(X['B2CR']):
        return flag_batch
    if hn in set(X['C2BR']):
        return flag_cloud
    return flag_default

F = Flag(X, myhn)
naptime = param['sleeptime']
while True:
    if os.path.isfile('/tmp/dynp_set_1'):
        print "1 dynp 1"
    elif os.path.isfile('/tmp/dynp_set_2'):
        print "1 dynp 2"
    else:
        print "1 dynp %d" % Flag(X, myhn)
    time.sleep(naptime)
    X = upd_X(Xfn)
